import type Redis from 'ioredis';

/**
 * 高性能缓存管理器
 * 支持 Redis 和内存双重缓存机制
 * 遵循 CLAUDE.md: 性能优化优先，安全性保障
 */
export class CacheManager {
  private redis: Redis | null = null;
  private memoryCache: Map<string, { value: any; expiry: number; size: number }> = new Map();
  private stats = {
    hits: 0,
    misses: 0,
    errors: 0,
    memoryHits: 0,
    redisHits: 0,
  };

  // 内存缓存配置
  private readonly MAX_MEMORY_SIZE = 50 * 1024 * 1024; // 50MB
  private readonly MAX_MEMORY_ITEMS = 10000;
  private currentMemorySize = 0;

  // 清理间隔
  private cleanupInterval: NodeJS.Timeout | null = null;

  constructor() {
    // Temporarily disable Redis to debug Railway deployment issue
    // this.initializeRedis();
    this.startCleanupInterval();
  }

  /**
   * 初始化 Redis 连接
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  private async initializeRedis(): Promise<void> {
    try {
      if (process.env.REDIS_URL) {
        const Redis = (await import('ioredis')).default;
        this.redis = new Redis(process.env.REDIS_URL, {
          // 连接配置优化 - 适配 Upstash
          maxRetriesPerRequest: 3,
          lazyConnect: true,
          // 超时配置优化
          connectTimeout: 10000, // 10秒连接超时
          commandTimeout: 5000, // 5秒命令超时
          // 连接保持优化
          keepAlive: 30000, // 30秒 keepAlive
          // 网络配置
          family: 4, // IPv4
          enableOfflineQueue: false,
          enableReadyCheck: false,
        });

        this.redis.on('error', (error) => {
          console.warn('[CacheManager] Redis error, falling back to memory:', error);
          // 不立即设置为 null，让重连机制处理
        });

        this.redis.on('connect', () => {
          // eslint-disable-next-line no-console
          console.log('[CacheManager] ✅ Redis connected successfully');
        });

        this.redis.on('ready', () => {
          // eslint-disable-next-line no-console
          console.log('[CacheManager] ✅ Redis ready for commands');
        });

        // eslint-disable-next-line no-console
        console.log('[CacheManager] 🔄 Redis connection initialized');
      } else {
        console.warn('[CacheManager] No REDIS_URL found, using memory cache only');
        this.redis = null;
      }
    } catch (error) {
      console.error('[CacheManager] Failed to initialize Redis:', error);
      this.redis = null;
    }
  }


  /**
   * 获取缓存值
   */
  async get<T>(key: string): Promise<T | null> {
    // 1. 先检查内存缓存
    const memoryResult = this.getFromMemory<T>(key);
    if (memoryResult !== null) {
      this.stats.hits++;
      this.stats.memoryHits++;
      return memoryResult;
    }

    // 2. 检查 Redis 缓存
    if (this.redis) {
      try {
        const value = await this.redis.get(key);
        if (value) {
          const redisResult = JSON.parse(value);
          this.stats.hits++;
          this.stats.redisHits++;

          // 将 Redis 结果缓存到内存中
          this.setInMemory(key, redisResult, 300); // 5分钟内存缓存
          return redisResult;
        }
      } catch (error) {
        console.error('[CacheManager] Redis get error:', error);
        this.stats.errors++;
      }
    }

    this.stats.misses++;
    return null;
  }

  /**
   * 设置缓存值
   */
  async set<T>(key: string, value: T, ttlSeconds: number = 3600): Promise<void> {
    // 1. 设置内存缓存
    this.setInMemory(key, value, Math.min(ttlSeconds, 300)); // 内存缓存最多5分钟

    // 2. 设置 Redis 缓存
    if (this.redis) {
      try {
        await this.redis.setex(key, ttlSeconds, JSON.stringify(value));
      } catch (error) {
        console.error('[CacheManager] Redis set error:', error);
        this.stats.errors++;
      }
    }
  }

  /**
   * 删除缓存
   */
  async delete(key: string): Promise<void> {
    // 1. 删除内存缓存
    const memoryItem = this.memoryCache.get(key);
    if (memoryItem) {
      this.currentMemorySize -= memoryItem.size;
      this.memoryCache.delete(key);
    }

    // 2. 删除 Redis 缓存
    if (this.redis) {
      try {
        await this.redis.del(key);
      } catch (error) {
        console.error('[CacheManager] Redis delete error:', error);
        this.stats.errors++;
      }
    }
  }

  /**
   * 批量删除缓存（支持模式匹配）
   */
  async deletePattern(pattern: string): Promise<void> {
    // 1. 删除匹配的内存缓存
    const regex = new RegExp(pattern.replace(/\*/g, '.*'));
    for (const [key, item] of this.memoryCache.entries()) {
      if (regex.test(key)) {
        this.currentMemorySize -= item.size;
        this.memoryCache.delete(key);
      }
    }

    // 2. 删除匹配的 Redis 缓存
    if (this.redis) {
      try {
        const keys = await this.redis.keys(pattern);
        if (keys.length > 0) {
          await this.redis.del(...keys);
        }
      } catch (error) {
        console.error('[CacheManager] Redis pattern delete error:', error);
        this.stats.errors++;
      }
    }
  }

  /**
   * 从内存获取缓存
   */
  private getFromMemory<T>(key: string): T | null {
    const item = this.memoryCache.get(key);
    if (!item) {
      return null;
    }

    if (Date.now() > item.expiry) {
      this.currentMemorySize -= item.size;
      this.memoryCache.delete(key);
      return null;
    }

    return item.value;
  }

  /**
   * 设置内存缓存
   */
  private setInMemory<T>(key: string, value: T, ttlSeconds: number): void {
    const serialized = JSON.stringify(value);
    const size = new Blob([serialized]).size;

    // 检查是否超过单个项目大小限制（1MB）
    if (size > 1024 * 1024) {
      return;
    }

    // 删除现有项目（如果存在）
    const existing = this.memoryCache.get(key);
    if (existing) {
      this.currentMemorySize -= existing.size;
    }

    // 检查内存限制
    this.ensureMemoryLimits(size);

    // 设置新项目
    this.memoryCache.set(key, {
      value,
      expiry: Date.now() + ttlSeconds * 1000,
      size,
    });

    this.currentMemorySize += size;
  }

  /**
   * 确保内存限制
   */
  private ensureMemoryLimits(newItemSize: number): void {
    // 检查项目数量限制
    while (this.memoryCache.size >= this.MAX_MEMORY_ITEMS) {
      this.evictOldestItem();
    }

    // 检查内存大小限制
    while (this.currentMemorySize + newItemSize > this.MAX_MEMORY_SIZE) {
      if (!this.evictOldestItem()) {
        break; // 无法释放更多内存
      }
    }
  }

  /**
   * 驱逐最旧的项目
   */
  private evictOldestItem(): boolean {
    let oldestKey: string | null = null;
    let oldestTime = Infinity;

    for (const [key, item] of this.memoryCache.entries()) {
      if (item.expiry < oldestTime) {
        oldestTime = item.expiry;
        oldestKey = key;
      }
    }

    if (oldestKey) {
      const item = this.memoryCache.get(oldestKey)!;
      this.currentMemorySize -= item.size;
      this.memoryCache.delete(oldestKey);
      return true;
    }

    return false;
  }

  /**
   * 清理过期的内存缓存
   */
  private cleanupExpiredItems(): void {
    const now = Date.now();
    for (const [key, item] of this.memoryCache.entries()) {
      if (now > item.expiry) {
        this.currentMemorySize -= item.size;
        this.memoryCache.delete(key);
      }
    }
  }

  /**
   * 启动清理间隔
   */
  private startCleanupInterval(): void {
    this.cleanupInterval = setInterval(() => {
      this.cleanupExpiredItems();
    }, 60000); // 每分钟清理一次
  }

  /**
   * 清空所有缓存
   */
  async clear(): Promise<void> {
    // 1. 清空内存缓存
    this.memoryCache.clear();
    this.currentMemorySize = 0;

    // 2. 清空 Redis 缓存
    if (this.redis) {
      try {
        await this.redis.flushdb();
      } catch (error) {
        console.error('[CacheManager] Redis clear error:', error);
        this.stats.errors++;
      }
    }
  }

  /**
   * 获取缓存统计信息
   */
  getStats() {
    const hitRate = this.stats.hits + this.stats.misses > 0
      ? (this.stats.hits / (this.stats.hits + this.stats.misses) * 100).toFixed(2)
      : '0.00';

    return {
      ...this.stats,
      hitRate: `${hitRate}%`,
      memoryItems: this.memoryCache.size,
      memorySize: `${(this.currentMemorySize / 1024 / 1024).toFixed(2)}MB`,
      redisConnected: !!this.redis,
    };
  }

  /**
   * 重置统计信息
   */
  resetStats(): void {
    this.stats = {
      hits: 0,
      misses: 0,
      errors: 0,
      memoryHits: 0,
      redisHits: 0,
    };
  }

  /**
   * 关闭缓存管理器
   */
  async close(): Promise<void> {
    if (this.cleanupInterval) {
      clearInterval(this.cleanupInterval);
    }

    if (this.redis) {
      await this.redis.quit();
      this.redis = null;
    }

    this.memoryCache.clear();
    this.currentMemorySize = 0;
  }
}

// 导出单例实例
export const cacheManager = new CacheManager();
