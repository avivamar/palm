#!/bin/bash

# Docker Ë∞ÉËØïÂ∑•ÂÖ∑
# Áî®‰∫éÊ∑±ÂÖ•Ë∞ÉËØï Docker ÊûÑÂª∫ÂíåËøêË°åÈóÆÈ¢ò

set -e

CONTAINER_NAME="rolitt-container"
IMAGE_NAME="rolitt-local-test"

echo "üîç Docker Debug Tools"
echo "===================="

# ÂáΩÊï∞ÔºöÊòæÁ§∫ÈïúÂÉè‰ø°ÊÅØ
show_image_info() {
    echo "üñºÔ∏è  Image Information:"
    docker images | grep $IMAGE_NAME || echo "No image found"
    echo ""
}

# ÂáΩÊï∞ÔºöÊòæÁ§∫ÂÆπÂô®‰ø°ÊÅØ
show_container_info() {
    echo "üì¶ Container Information:"
    docker ps -a | grep $CONTAINER_NAME || echo "No container found"
    echo ""
}

# ÂáΩÊï∞ÔºöÊòæÁ§∫ÂÆπÂô®Êó•Âøó
show_logs() {
    echo "üìù Container Logs:"
    if docker ps -a | grep -q $CONTAINER_NAME; then
        docker logs $CONTAINER_NAME
    else
        echo "No container found"
    fi
    echo ""
}

# ÂáΩÊï∞ÔºöÊòæÁ§∫ÂÆπÂô®ÁªüËÆ°
show_stats() {
    echo "üìä Container Stats:"
    if docker ps | grep -q $CONTAINER_NAME; then
        docker stats --no-stream $CONTAINER_NAME
    else
        echo "Container not running"
    fi
    echo ""
}

# ÂáΩÊï∞ÔºöËøõÂÖ•ÂÆπÂô®
enter_container() {
    echo "üö™ Entering container..."
    if docker ps | grep -q $CONTAINER_NAME; then
        docker exec -it $CONTAINER_NAME /bin/sh
    else
        echo "Container not running"
    fi
}

# ÂáΩÊï∞ÔºöÊ£ÄÊü•ÊûÑÂª∫ËøáÁ®ã
check_build_process() {
    echo "üîç Checking build process..."
    echo "Available Dockerfiles:"
    ls -la Dockerfile*
    echo ""
    echo "Build context files:"
    ls -la package*.json
    echo ""
    echo "Source files:"
    ls -la src/
    echo ""
}

# ÂáΩÊï∞ÔºöÊµãËØï‰∏çÂêåÁöÑ Dockerfile
test_dockerfile() {
    local dockerfile=$1
    echo "üß™ Testing $dockerfile..."
    
    # ÊûÑÂª∫ÊµãËØï
    docker build -f $dockerfile -t ${IMAGE_NAME}-test . && {
        echo "‚úÖ $dockerfile build successful"
        docker images | grep ${IMAGE_NAME}-test
    } || {
        echo "‚ùå $dockerfile build failed"
    }
    echo ""
}

# ÂáΩÊï∞ÔºöÊ∏ÖÁêÜÊâÄÊúâËµÑÊ∫ê
cleanup_all() {
    echo "üßπ Cleaning up all Docker resources..."
    docker stop $CONTAINER_NAME 2>/dev/null || true
    docker rm $CONTAINER_NAME 2>/dev/null || true
    docker rmi $IMAGE_NAME 2>/dev/null || true
    docker rmi ${IMAGE_NAME}-test 2>/dev/null || true
    docker system prune -f
    echo "‚úÖ Cleanup completed"
}

# ‰∏ªËèúÂçï
case "${1:-menu}" in
    "info")
        show_image_info
        show_container_info
        ;;
    "logs")
        show_logs
        ;;
    "stats")
        show_stats
        ;;
    "enter")
        enter_container
        ;;
    "build-check")
        check_build_process
        ;;
    "test-all")
        for dockerfile in Dockerfile Dockerfile.minimal Dockerfile.simple Dockerfile.railway; do
            if [ -f "$dockerfile" ]; then
                test_dockerfile $dockerfile
            fi
        done
        ;;
    "cleanup")
        cleanup_all
        ;;
    "menu"|*)
        echo "Available commands:"
        echo "  ./scripts/docker-debug.sh info       - Show image and container info"
        echo "  ./scripts/docker-debug.sh logs       - Show container logs"
        echo "  ./scripts/docker-debug.sh stats      - Show container stats"
        echo "  ./scripts/docker-debug.sh enter      - Enter running container"
        echo "  ./scripts/docker-debug.sh build-check - Check build context"
        echo "  ./scripts/docker-debug.sh test-all   - Test all Dockerfiles"
        echo "  ./scripts/docker-debug.sh cleanup    - Clean up all resources"
        ;;
esac