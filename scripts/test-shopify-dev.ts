/**
 * Shopify ÈõÜÊàêÂºÄÂèëÊµãËØïËÑöÊú¨ (Êó†ÈúÄÁúüÂÆûÂá≠ÊçÆ)
 */

import { shopifyMetrics } from '@rolitt/shopify/monitoring/metrics';

async function testShopifyIntegrationDev() {
  console.log('üß™ Starting Shopify integration development tests...');

  try {
    // 1. ÊµãËØïÂ∫¶ÈáèÊî∂ÈõÜÂô®
    console.log('\n1Ô∏è‚É£ Testing metrics collector...');

    // Ê®°Êãü API Ë∞ÉÁî®
    shopifyMetrics.recordApiCall(true, 150); // ÊàêÂäüË∞ÉÁî®Ôºå150ms
    shopifyMetrics.recordApiCall(true, 200); // ÊàêÂäüË∞ÉÁî®Ôºå200ms
    shopifyMetrics.recordApiCall(false, 500); // Â§±Ë¥•Ë∞ÉÁî®Ôºå500ms

    // Ê®°ÊãüËÆ¢ÂçïÂêåÊ≠•
    shopifyMetrics.recordOrderSync(true);
    shopifyMetrics.recordOrderSync(true);
    shopifyMetrics.recordOrderSync(false);

    console.log('‚úÖ Metrics collector test completed');

    // 2. ÊµãËØïÂ∫¶ÈáèÊä•ÂëäÁîüÊàê
    console.log('\n2Ô∏è‚É£ Testing metrics reporting...');

    const summary = shopifyMetrics.getMetrics();
    console.log('üìä Current metrics summary:', {
      totalApiCalls: summary.totalApiCalls,
      successfulApiCalls: summary.successfulApiCalls,
      failedApiCalls: summary.failedApiCalls,
      averageResponseTime: `${summary.averageResponseTime.toFixed(0)}ms`,
      errorRate: `${summary.errorRate.toFixed(2)}%`,
      healthStatus: summary.healthStatus,
      ordersSynced: summary.ordersSynced,
      ordersFailedSync: summary.ordersFailedSync,
    });

    // 3. ÊµãËØïËØ¶ÁªÜÊä•Âëä
    console.log('\n3Ô∏è‚É£ Testing detailed reporting...');

    const detailedReport = shopifyMetrics.getDetailedReport();
    console.log('üìà Performance metrics:', detailedReport.performance);
    console.log('üîÑ Sync metrics:', detailedReport.sync);
    console.log('üè• Health recommendations:', detailedReport.health.recommendations);

    // 4. ÊµãËØïÂØºÂá∫ÂäüËÉΩ
    console.log('\n4Ô∏è‚É£ Testing export functionality...');

    const exportData = shopifyMetrics.exportMetrics();
    console.log('üíæ Export data structure validated:', {
      hasTimestamp: !!exportData.timestamp,
      hasMetrics: !!exportData.metrics,
      hasPerformance: !!exportData.performance,
      metricsKeys: Object.keys(exportData.metrics),
    });

    // 5. ÊµãËØïÂÅ•Â∫∑Áä∂ÊÄÅÈÄªËæë
    console.log('\n5Ô∏è‚É£ Testing health status logic...');

    // Ê®°Êãü‰∏çÂêåÁöÑÈîôËØØÁéáÂú∫ÊôØ
    console.log('Current health status:', summary.healthStatus);

    if (summary.healthStatus === 'healthy') {
      console.log('‚úÖ System is operating normally');
    } else if (summary.healthStatus === 'degraded') {
      console.log('‚ö†Ô∏è System performance is degraded');
    } else {
      console.log('‚ùå System is unhealthy');
    }

    // 6. ÊµãËØïÂ∫¶ÈáèÈáçÁΩÆ
    console.log('\n6Ô∏è‚É£ Testing metrics reset...');

    const beforeReset = shopifyMetrics.getMetrics();
    console.log('Before reset - API calls:', beforeReset.totalApiCalls);

    shopifyMetrics.reset();

    const afterReset = shopifyMetrics.getMetrics();
    console.log('After reset - API calls:', afterReset.totalApiCalls);
    console.log('‚úÖ Metrics reset successfully');

    console.log('\nüéâ All development tests completed successfully!');
    console.log('\nüìã Next steps:');
    console.log('  1. Configure Shopify environment variables:');
    console.log('     - SHOPIFY_STORE_DOMAIN=your-store.myshopify.com');
    console.log('     - SHOPIFY_ADMIN_ACCESS_TOKEN=shpat_...');
    console.log('  2. Test with real Shopify API connection');
    console.log('  3. Verify webhook integration in production environment');
  } catch (error) {
    console.error('üõë Development test failed:', error);
    process.exit(1);
  }
}

// ËøêË°åÂºÄÂèëÊµãËØï
if (require.main === module) {
  testShopifyIntegrationDev()
    .then(() => {
      console.log('‚úÖ Development test suite completed successfully');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Development test suite failed:', error);
      process.exit(1);
    });
}

export { testShopifyIntegrationDev };
