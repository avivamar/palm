#!/bin/bash

# GTM Â§öÂπ≥Âè∞ÂàÜÊûêÂ∑•ÂÖ∑ÈõÜÊàêËÆæÁΩÆËÑöÊú¨
# ‰ΩúËÄÖ: Rolitt Development Team
# Êó•Êúü: $(date +%Y-%m-%d)

set -e

# È¢úËâ≤ÂÆö‰πâ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ËÑöÊú¨ÈÖçÁΩÆ
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

echo -e "${BLUE}üöÄ GTM Â§öÂπ≥Âè∞ÂàÜÊûêÂ∑•ÂÖ∑ÈõÜÊàêËÆæÁΩÆ${NC}"
echo "========================================"
echo ""

# Ê£ÄÊü•ÁéØÂ¢É
check_environment() {
    echo -e "${BLUE}üìã Ê£ÄÊü•ÁéØÂ¢É...${NC}"
    
    if [ ! -f "$PROJECT_ROOT/package.json" ]; then
        echo -e "${RED}‚ùå ÈîôËØØÔºöÊú™Âú®È°πÁõÆÊ†πÁõÆÂΩïËøêË°åËÑöÊú¨${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ ÁéØÂ¢ÉÊ£ÄÊü•ÈÄöËøá${NC}"
    echo ""
}

# Ëé∑ÂèñGTM ID
get_gtm_id() {
    echo -e "${BLUE}üìù ÈÖçÁΩÆ Google Tag Manager${NC}"
    echo "----------------------------------------"
    
    if [ -z "$GTM_ID" ]; then
        echo "ËØ∑ËæìÂÖ•‰Ω†ÁöÑ GTM ÂÆπÂô® ID (Ê†ºÂºè: GTM-XXXXXXX):"
        read -p "GTM ID: " GTM_ID
    fi
    
    if [[ ! $GTM_ID =~ ^GTM-[A-Z0-9]+$ ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  GTM ID Ê†ºÂºèÂèØËÉΩ‰∏çÊ≠£Á°ÆÔºå‰ΩÜÁªßÁª≠ËÆæÁΩÆ...${NC}"
    fi
    
    echo -e "${GREEN}‚úÖ GTM ID: $GTM_ID${NC}"
    echo ""
}

# Ëé∑ÂèñÂêÑÂàÜÊûêÂ∑•ÂÖ∑ÁöÑÈÖçÁΩÆ
get_analytics_configs() {
    echo -e "${BLUE}üîß ÈÖçÁΩÆÂàÜÊûêÂ∑•ÂÖ∑${NC}"
    echo "----------------------------------------"
    
    # Microsoft Clarity
    echo "Microsoft Clarity Project ID (ÂèØÈÄâ):"
    read -p "Clarity ID: " CLARITY_ID
    
    # PostHog
    echo "PostHog Project Key (ÂèØÈÄâ):"
    read -p "PostHog Key: " POSTHOG_KEY
    echo "PostHog Host (ÈªòËÆ§: https://app.posthog.com):"
    read -p "PostHog Host: " POSTHOG_HOST
    POSTHOG_HOST=${POSTHOG_HOST:-"https://app.posthog.com"}
    
    # TikTok Pixel
    echo "TikTok Pixel ID (ÂèØÈÄâ):"
    read -p "TikTok Pixel ID: " TIKTOK_PIXEL_ID
    
    # Umami
    echo "Umami Website ID (ÂèØÈÄâ):"
    read -p "Umami Website ID: " UMAMI_WEBSITE_ID
    echo "Umami URL (ÂèØÈÄâ):"
    read -p "Umami URL: " UMAMI_URL
    
    # Rybbit
    echo "Rybbit ID (ÂèØÈÄâ):"
    read -p "Rybbit ID: " RYBBIT_ID
    
    echo -e "${GREEN}‚úÖ ÂàÜÊûêÂ∑•ÂÖ∑ÈÖçÁΩÆÂÆåÊàê${NC}"
    echo ""
}

# Êõ¥Êñ∞ÁéØÂ¢ÉÂèòÈáè
update_env_variables() {
    echo -e "${BLUE}üìù Êõ¥Êñ∞ÁéØÂ¢ÉÂèòÈáè${NC}"
    echo "----------------------------------------"
    
    ENV_FILE="$PROJECT_ROOT/.env.local"
    
    # Â§á‰ªΩÁé∞ÊúâÁöÑ .env.local
    if [ -f "$ENV_FILE" ]; then
        cp "$ENV_FILE" "$ENV_FILE.backup.$(date +%Y%m%d_%H%M%S)"
        echo -e "${GREEN}‚úÖ Â§á‰ªΩÁé∞ÊúâÁéØÂ¢ÉÂèòÈáèÊñá‰ª∂${NC}"
    fi
    
    # Ê∑ªÂä† GTM ÈÖçÁΩÆ
    echo "" >> "$ENV_FILE"
    echo "# Google Tag Manager - Ê∑ªÂä†‰∫é $(date)" >> "$ENV_FILE"
    echo "NEXT_PUBLIC_GTM_ID=$GTM_ID" >> "$ENV_FILE"
    
    # Ê∑ªÂä†ÂÖ∂‰ªñÂàÜÊûêÂ∑•ÂÖ∑ÈÖçÁΩÆ
    echo "" >> "$ENV_FILE"
    echo "# ÂàÜÊûêÂ∑•ÂÖ∑ÈÖçÁΩÆ - Ê∑ªÂä†‰∫é $(date)" >> "$ENV_FILE"
    
    [ ! -z "$CLARITY_ID" ] && echo "NEXT_PUBLIC_CLARITY_ID=$CLARITY_ID" >> "$ENV_FILE"
    [ ! -z "$POSTHOG_KEY" ] && echo "NEXT_PUBLIC_POSTHOG_KEY=$POSTHOG_KEY" >> "$ENV_FILE"
    [ ! -z "$POSTHOG_HOST" ] && echo "NEXT_PUBLIC_POSTHOG_HOST=$POSTHOG_HOST" >> "$ENV_FILE"
    [ ! -z "$TIKTOK_PIXEL_ID" ] && echo "NEXT_PUBLIC_TIKTOK_PIXEL_ID=$TIKTOK_PIXEL_ID" >> "$ENV_FILE"
    [ ! -z "$UMAMI_WEBSITE_ID" ] && echo "NEXT_PUBLIC_UMAMI_WEBSITE_ID=$UMAMI_WEBSITE_ID" >> "$ENV_FILE"
    [ ! -z "$UMAMI_URL" ] && echo "NEXT_PUBLIC_UMAMI_URL=$UMAMI_URL" >> "$ENV_FILE"
    [ ! -z "$RYBBIT_ID" ] && echo "NEXT_PUBLIC_RYBBIT_ID=$RYBBIT_ID" >> "$ENV_FILE"
    
    echo -e "${GREEN}‚úÖ ÁéØÂ¢ÉÂèòÈáèÂ∑≤Êõ¥Êñ∞${NC}"
    echo ""
}

# ÂàõÂª∫GTMÁªÑ‰ª∂
create_gtm_component() {
    echo -e "${BLUE}üîß ÂàõÂª∫ GTM ÁªÑ‰ª∂${NC}"
    echo "----------------------------------------"
    
    ANALYTICS_DIR="$PROJECT_ROOT/src/components/analytics"
    mkdir -p "$ANALYTICS_DIR"
    
    # GTM ÂÆπÂô®ÁªÑ‰ª∂
    cat > "$ANALYTICS_DIR/GTMContainer.tsx" << 'EOF'
'use client'

import Script from 'next/script'
import { useEffect } from 'react'

declare global {
  interface Window {
    dataLayer: any[]
  }
}

interface GTMContainerProps {
  gtmId: string
}

export function GTMContainer({ gtmId }: GTMContainerProps) {
  useEffect(() => {
    // ÂàùÂßãÂåñ dataLayer
    if (typeof window !== 'undefined') {
      window.dataLayer = window.dataLayer || []
    }
  }, [])

  if (!gtmId) {
    console.warn('GTM ID not provided')
    return null
  }

  return (
    <>
      {/* GTM Script */}
      <Script
        id="gtm-script"
        strategy="afterInteractive"
        dangerouslySetInnerHTML={{
          __html: `
            (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
            new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
            j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
            'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
            })(window,document,'script','dataLayer','${gtmId}');
          `,
        }}
      />
      
      {/* GTM NoScript */}
      <noscript>
        <iframe
          src={`https://www.googletagmanager.com/ns.html?id=${gtmId}`}
          height="0"
          width="0"
          style={{ display: 'none', visibility: 'hidden' }}
        />
      </noscript>
    </>
  )
}
EOF

    # Áªü‰∏ÄËøΩË∏™ÁªÑ‰ª∂
    cat > "$ANALYTICS_DIR/UnifiedTracking.tsx" << 'EOF'
'use client'

import { useEffect } from 'react'
import { usePathname } from 'next/navigation'

declare global {
  interface Window {
    dataLayer: any[]
    gtag: (...args: any[]) => void
  }
}

export const UnifiedTracking = () => {
  const pathname = usePathname()

  useEffect(() => {
    // È°µÈù¢ÊµèËßà‰∫ã‰ª∂
    if (typeof window !== 'undefined' && window.dataLayer) {
      window.dataLayer.push({
        event: 'page_view',
        page_path: pathname,
        page_title: document.title,
        timestamp: new Date().toISOString()
      })
    }
  }, [pathname])

  return null
}

// ‰∫ã‰ª∂ËøΩË∏™Hook
export const useUnifiedTracking = () => {
  const trackEvent = (eventName: string, parameters: Record<string, any> = {}) => {
    if (typeof window !== 'undefined' && window.dataLayer) {
      window.dataLayer.push({
        event: eventName,
        ...parameters,
        timestamp: new Date().toISOString()
      })
    }
  }

  const trackPurchase = (transactionId: string, value: number, currency = 'USD', items: any[] = []) => {
    trackEvent('purchase', {
      transaction_id: transactionId,
      value: value,
      currency: currency,
      items: items
    })
  }

  const trackAddToCart = (itemId: string, itemName: string, value: number, currency = 'USD') => {
    trackEvent('add_to_cart', {
      item_id: itemId,
      item_name: itemName,
      value: value,
      currency: currency
    })
  }

  const trackLead = (form_name: string, content: Record<string, any> = {}) => {
    trackEvent('generate_lead', {
      form_name: form_name,
      ...content
    })
  }

  return {
    trackEvent,
    trackPurchase,
    trackAddToCart,
    trackLead
  }
}
EOF

    # ÂêåÊÑèÁÆ°ÁêÜÁªÑ‰ª∂
    cat > "$ANALYTICS_DIR/ConsentManager.tsx" << 'EOF'
'use client'

import { useEffect, useState } from 'react'

interface ConsentState {
  analytics: boolean
  marketing: boolean
  personalization: boolean
}

export const ConsentManager = () => {
  const [consent, setConsent] = useState<ConsentState | null>(null)

  useEffect(() => {
    const savedConsent = localStorage.getItem('cookie-consent')
    if (savedConsent) {
      try {
        const parsed = JSON.parse(savedConsent)
        setConsent({
          analytics: parsed === true || parsed.analytics === true,
          marketing: parsed === true || parsed.marketing === true,
          personalization: parsed === true || parsed.personalization === true,
        })
      } catch (e) {
        console.error('Error parsing consent:', e)
      }
    }
  }, [])

  useEffect(() => {
    if (consent && typeof window !== 'undefined' && window.dataLayer) {
      // Êõ¥Êñ∞ GTM ÂêåÊÑèÁä∂ÊÄÅ
      window.dataLayer.push({
        event: 'consent_update',
        analytics_storage: consent.analytics ? 'granted' : 'denied',
        ad_storage: consent.marketing ? 'granted' : 'denied',
        personalization_storage: consent.personalization ? 'granted' : 'denied'
      })
    }
  }, [consent])

  return null
}
EOF

    echo -e "${GREEN}‚úÖ GTM ÁªÑ‰ª∂Â∑≤ÂàõÂª∫${NC}"
    echo ""
}

# Êõ¥Êñ∞LayoutÊñá‰ª∂
update_layout() {
    echo -e "${BLUE}üîß Êõ¥Êñ∞ Layout Êñá‰ª∂${NC}"
    echo "----------------------------------------"
    
    LAYOUT_FILE="$PROJECT_ROOT/src/app/[locale]/layout.tsx"
    
    if [ ! -f "$LAYOUT_FILE" ]; then
        echo -e "${RED}‚ùå Layout Êñá‰ª∂Êú™ÊâæÂà∞: $LAYOUT_FILE${NC}"
        return 1
    fi
    
    # Â§á‰ªΩÂéüÊñá‰ª∂
    cp "$LAYOUT_FILE" "$LAYOUT_FILE.backup.$(date +%Y%m%d_%H%M%S)"
    
    # Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁªèÂåÖÂê´GTM
    if grep -q "GTMContainer" "$LAYOUT_FILE"; then
        echo -e "${YELLOW}‚ö†Ô∏è  Layout Êñá‰ª∂Â∑≤ÂåÖÂê´ GTM ÁªÑ‰ª∂${NC}"
        return 0
    fi
    
    # ÂàõÂª∫Êõ¥Êñ∞ÂêéÁöÑ layout Êñá‰ª∂
    cat > "$LAYOUT_FILE.new" << 'EOF'
import type { Metadata, Viewport } from 'next';
import { GoogleAnalytics } from '@next/third-parties/google';
import { NextIntlClientProvider } from 'next-intl';
import { ThemeProvider } from 'next-themes';
import { notFound } from 'next/navigation';
import { getMessages } from 'next-intl/server';

import { AnimationProvider } from '@/components/AnimationContext';
import CookieBanner from '@/components/CookieBanner';
import { OrganizationJsonLd } from '@/components/JsonLd';
import { MetaPixel } from '@/components/MetaPixel';
import { Toaster } from '@/components/Toaster';
import { GTMContainer } from '@/components/analytics/GTMContainer';
import { UnifiedTracking } from '@/components/analytics/UnifiedTracking';
import { ConsentManager } from '@/components/analytics/ConsentManager';
import { routing } from '@/libs/i18nNavigation';
import '@/styles/globals.css';

export const viewport: Viewport = {
  width: 'device-width',
  initialScale: 1,
  maximumScale: 5,
};

// ... ‰øùÁïôÁé∞ÊúâÁöÑ metadata ÈÖçÁΩÆ ...

export default async function RootLayout({
  children,
  params,
}: {
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
}) {
  const { locale } = await params;

  if (!locale || !routing.locales.includes(locale)) {
    notFound();
  }

  const messages = await getMessages(locale);

  return (
    <html lang={locale} suppressHydrationWarning>
      <body suppressHydrationWarning>
        {/* SEO: Organization structured data */}
        <OrganizationJsonLd lang={locale as any} />
        
        {/* Google Tag Manager */}
        <GTMContainer gtmId={process.env.NEXT_PUBLIC_GTM_ID!} />
        
        <NextIntlClientProvider locale={locale} messages={messages}>
          <ThemeProvider
            attribute="class"
            defaultTheme="light"
            enableSystem
            disableTransitionOnChange
          >
            <AnimationProvider>
              {children}
              <UnifiedTracking />
            </AnimationProvider>
            <Toaster />
            <CookieBanner />
            <ConsentManager />
          </ThemeProvider>
        </NextIntlClientProvider>
        
        {/* ‰øùÁïôÁé∞ÊúâÁöÑÂÖ∂‰ªñËÑöÊú¨ */}
        <GoogleAnalytics
          gaId={process.env.NEXT_PUBLIC_GA_MEASUREMENT_ID!}
          dataLayerName="dataLayer"
        />
        
        <MetaPixel pixelId={process.env.NEXT_PUBLIC_META_PIXEL_ID!} />
      </body>
    </html>
  );
}
EOF

    echo -e "${YELLOW}‚ö†Ô∏è  Layout Êñá‰ª∂Â∑≤Êõ¥Êñ∞ÔºåËØ∑ÊâãÂä®Ê£ÄÊü•Âπ∂ÂêàÂπ∂Êõ¥Êîπ${NC}"
    echo "   ÂéüÊñá‰ª∂Â§á‰ªΩ: $LAYOUT_FILE.backup.*"
    echo "   Êñ∞Êñá‰ª∂Ê®°Êùø: $LAYOUT_FILE.new"
    echo ""
}

# ÂàõÂª∫GTMÈÖçÁΩÆÊåáÂçó
create_gtm_config_guide() {
    echo -e "${BLUE}üìö ÂàõÂª∫ GTM ÈÖçÁΩÆÊåáÂçó${NC}"
    echo "----------------------------------------"
    
    cat > "$PROJECT_ROOT/scripts/gtm-config-guide.md" << 'EOF'
# GTM ÈÖçÁΩÆÊåáÂçó

## üéØ GTM ÂÆπÂô®ËÆæÁΩÆÊ≠•È™§

### 1. ÂàõÂª∫ GTM ÂÆπÂô®
1. ËÆøÈóÆ [Google Tag Manager](https://tagmanager.google.com)
2. ÁÇπÂáª "ÂàõÂª∫Ë¥¶Êà∑"
3. ËæìÂÖ•Ë¥¶Êà∑ÂêçÁß∞ÂíåÂÆπÂô®ÂêçÁß∞
4. ÈÄâÊã©Âπ≥Âè∞ÔºöWeb
5. ËÆ∞‰∏ãÂÆπÂô® ID (GTM-XXXXXXX)

### 2. Âü∫Á°ÄÈÖçÁΩÆ

#### ÂÜÖÁΩÆÂèòÈáèÂêØÁî®
- Page URL
- Page Title
- Page Path
- Click Element
- Click Text
- Form Element

#### Ëß¶ÂèëÂô®ÈÖçÁΩÆ
1. **All Pages** (È°µÈù¢ÊµèËßà)
2. **Contact Form Submit** (Ë°®ÂçïÊèê‰∫§)
3. **Purchase** (Ë¥≠‰π∞‰∫ã‰ª∂)
4. **Add to Cart** (Ê∑ªÂä†Âà∞Ë¥≠Áâ©ËΩ¶)

### 3. Ê†áÁ≠æÈÖçÁΩÆ

#### Microsoft Clarity
- Ê†áÁ≠æÁ±ªÂûãÔºöËá™ÂÆö‰πâ HTML
- HTML: `<script>(function(c,l,a,r,i,t,y){...})(window, document, "clarity", "script", "{{Clarity ID}}");</script>`
- Ëß¶ÂèëÂô®ÔºöAll Pages

#### PostHog
- Ê†áÁ≠æÁ±ªÂûãÔºöËá™ÂÆö‰πâ HTML
- HTML: PostHog ÂàùÂßãÂåñ‰ª£Á†Å
- Ëß¶ÂèëÂô®ÔºöAll Pages

#### TikTok Pixel
- Ê†áÁ≠æÁ±ªÂûãÔºöTikTok Pixel (Â¶ÇÊûúÊúâÊ®°Êùø) ÊàñËá™ÂÆö‰πâ HTML
- ÈÖçÁΩÆÔºöPixel ID
- Ëß¶ÂèëÂô®ÔºöAll Pages

#### Umami
- Ê†áÁ≠æÁ±ªÂûãÔºöËá™ÂÆö‰πâ HTML
- HTML: `<script async defer data-website-id="{{Umami Website ID}}" src="{{Umami URL}}/umami.js"></script>`
- Ëß¶ÂèëÂô®ÔºöAll Pages

### 4. ÂèòÈáèÈÖçÁΩÆ

ÂàõÂª∫‰ª•‰∏ãÂèòÈáèÔºö
- Clarity ID: Â∏∏ÈáèÂèòÈáè
- PostHog Key: Â∏∏ÈáèÂèòÈáè
- TikTok Pixel ID: Â∏∏ÈáèÂèòÈáè
- Umami Website ID: Â∏∏ÈáèÂèòÈáè
- Umami URL: Â∏∏ÈáèÂèòÈáè

### 5. ‰∫ã‰ª∂ËøΩË∏™

#### Ê†áÂáÜÁîµÂ≠êÂïÜÂä°‰∫ã‰ª∂
- purchase
- add_to_cart
- begin_checkout
- generate_lead

#### Ëá™ÂÆö‰πâ‰∫ã‰ª∂
- contact_form_submit
- newsletter_signup
- video_play
- file_download

## üß™ ÊµãËØïÊ≠•È™§

1. ÂêØÁî® GTM È¢ÑËßàÊ®°Âºè
2. ËÆøÈóÆÁΩëÁ´ô
3. Ê£ÄÊü•ÊâÄÊúâÊ†áÁ≠æÊòØÂê¶Ëß¶Âèë
4. È™åËØÅ dataLayer ‰∫ã‰ª∂
5. Á°ÆËÆ§ÂêÑÂàÜÊûêÂ∑•ÂÖ∑Êé•Êî∂Êï∞ÊçÆ

## üìä ÂèëÂ∏ÉÊµÅÁ®ã

1. Âú®È¢ÑËßàÊ®°Âºè‰∏ãÂÆåÊàêÊµãËØï
2. Êèê‰∫§Êõ¥Êîπ
3. Ê∑ªÂä†ÁâàÊú¨ÂêçÁß∞ÂíåÊèèËø∞
4. ÂèëÂ∏ÉÂÆπÂô®
5. È™åËØÅÁîü‰∫ßÁéØÂ¢É

EOF

    echo -e "${GREEN}‚úÖ GTM ÈÖçÁΩÆÊåáÂçóÂ∑≤ÂàõÂª∫${NC}"
    echo ""
}

# ÂàõÂª∫È™åËØÅËÑöÊú¨
create_verification_script() {
    echo -e "${BLUE}üîß ÂàõÂª∫È™åËØÅËÑöÊú¨${NC}"
    echo "----------------------------------------"
    
    cat > "$PROJECT_ROOT/scripts/verify-gtm-analytics.sh" << 'EOF'
#!/bin/bash

# GTM ÂíåÂàÜÊûêÂ∑•ÂÖ∑È™åËØÅËÑöÊú¨

echo "üîç GTM ÂíåÂàÜÊûêÂ∑•ÂÖ∑È™åËØÅ"
echo "=========================="

# Ê£ÄÊü•ÁéØÂ¢ÉÂèòÈáè
echo "üìù Ê£ÄÊü•ÁéØÂ¢ÉÂèòÈáè..."
if [ -f ".env.local" ]; then
    echo "‚úÖ .env.local Êñá‰ª∂Â≠òÂú®"
    
    if grep -q "NEXT_PUBLIC_GTM_ID" .env.local; then
        GTM_ID=$(grep "NEXT_PUBLIC_GTM_ID" .env.local | cut -d'=' -f2)
        echo "‚úÖ GTM ID: $GTM_ID"
    else
        echo "‚ùå GTM ID Êú™ÈÖçÁΩÆ"
    fi
else
    echo "‚ùå .env.local Êñá‰ª∂‰∏çÂ≠òÂú®"
fi

# Ê£ÄÊü•ÁªÑ‰ª∂Êñá‰ª∂
echo ""
echo "üìÅ Ê£ÄÊü•ÁªÑ‰ª∂Êñá‰ª∂..."
COMPONENTS=(
    "src/components/analytics/GTMContainer.tsx"
    "src/components/analytics/UnifiedTracking.tsx"
    "src/components/analytics/ConsentManager.tsx"
)

for component in "${COMPONENTS[@]}"; do
    if [ -f "$component" ]; then
        echo "‚úÖ $component"
    else
        echo "‚ùå $component"
    fi
done

# Ê£ÄÊü• Layout Êñá‰ª∂
echo ""
echo "üîß Ê£ÄÊü• Layout Êñá‰ª∂..."
LAYOUT_FILE="src/app/[locale]/layout.tsx"
if [ -f "$LAYOUT_FILE" ]; then
    if grep -q "GTMContainer" "$LAYOUT_FILE"; then
        echo "‚úÖ Layout Êñá‰ª∂ÂåÖÂê´ GTM ÁªÑ‰ª∂"
    else
        echo "‚ö†Ô∏è  Layout Êñá‰ª∂ÂèØËÉΩÈúÄË¶ÅÊâãÂä®Êõ¥Êñ∞"
    fi
else
    echo "‚ùå Layout Êñá‰ª∂‰∏çÂ≠òÂú®"
fi

echo ""
echo "üìã ‰∏ã‰∏ÄÊ≠•Êìç‰ΩúÔºö"
echo "1. ÂêØÂä®ÂºÄÂèëÊúçÂä°Âô®: npm run dev"
echo "2. ÊâìÂºÄÊµèËßàÂô®ÂºÄÂèëËÄÖÂ∑•ÂÖ∑"
echo "3. Ê£ÄÊü• Network Ê†áÁ≠æ‰∏≠ÁöÑ GTM ËØ∑Ê±Ç"
echo "4. Âú® Console ‰∏≠È™åËØÅ: console.log(window.dataLayer)"
echo "5. ‰ΩøÁî® GTM È¢ÑËßàÊ®°ÂºèÊµãËØïÊ†áÁ≠æ"

EOF

    chmod +x "$PROJECT_ROOT/scripts/verify-gtm-analytics.sh"
    echo -e "${GREEN}‚úÖ È™åËØÅËÑöÊú¨Â∑≤ÂàõÂª∫${NC}"
    echo ""
}

# ÊòæÁ§∫ÂÆåÊàêÊÄªÁªì
show_completion_summary() {
    echo -e "${GREEN}üéâ GTM Â§öÂπ≥Âè∞ÂàÜÊûêÂ∑•ÂÖ∑ÈõÜÊàêËÆæÁΩÆÂÆåÊàêÔºÅ${NC}"
    echo "========================================"
    echo ""
    echo -e "${BLUE}üìã Â∑≤ÂÆåÊàêÁöÑËÆæÁΩÆÔºö${NC}"
    echo "‚úÖ ÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆ"
    echo "‚úÖ GTM ÁªÑ‰ª∂ÂàõÂª∫"
    echo "‚úÖ Áªü‰∏ÄËøΩË∏™Á≥ªÁªü"
    echo "‚úÖ ÂêåÊÑèÁÆ°ÁêÜÁªÑ‰ª∂"
    echo "‚úÖ ÈÖçÁΩÆÊåáÂçóÊñáÊ°£"
    echo "‚úÖ È™åËØÅËÑöÊú¨"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  ÊâãÂä®Êìç‰ΩúË¶ÅÊ±ÇÔºö${NC}"
    echo "1. Ê£ÄÊü•Âπ∂Êõ¥Êñ∞ Layout Êñá‰ª∂"
    echo "2. Âú® GTM ‰∏≠ÈÖçÁΩÆÊ†áÁ≠æÂíåËß¶ÂèëÂô®"
    echo "3. ÊµãËØïÂêÑÂàÜÊûêÂ∑•ÂÖ∑"
    echo ""
    echo -e "${BLUE}üìö Áõ∏ÂÖ≥Êñá‰ª∂Ôºö${NC}"
    echo "- GTM ÈÖçÁΩÆÊåáÂçó: scripts/gtm-config-guide.md"
    echo "- ËØ¶ÁªÜÈõÜÊàêÊåáÂçó: scripts/gtm-analytics-integration-guide.md"
    echo "- È™åËØÅËÑöÊú¨: scripts/verify-gtm-analytics.sh"
    echo ""
    echo -e "${BLUE}üöÄ ‰∏ã‰∏ÄÊ≠•Êìç‰ΩúÔºö${NC}"
    echo "1. ËøêË°å: ./scripts/verify-gtm-analytics.sh"
    echo "2. ÂêØÂä®ÂºÄÂèëÊúçÂä°Âô®: npm run dev"
    echo "3. ÈÖçÁΩÆ GTM ÂÆπÂô® (ÂèÇËÄÉ gtm-config-guide.md)"
    echo "4. ÊµãËØïÂêÑÂàÜÊûêÂ∑•ÂÖ∑ÁöÑÊï∞ÊçÆÊî∂ÈõÜ"
    echo ""
    echo -e "${GREEN}üéØ Áé∞Âú®‰Ω†ÂèØ‰ª•ÈÄöËøá GTM ÈõÜ‰∏≠ÁÆ°ÁêÜÔºö${NC}"
    echo "‚Ä¢ Microsoft Clarity"
    echo "‚Ä¢ PostHog"
    echo "‚Ä¢ TikTok Pixel"
    echo "‚Ä¢ Umami"
    echo "‚Ä¢ Rybbit"
    echo "‚Ä¢ ‰ª•ÂèäÁé∞ÊúâÁöÑ GA4 Âíå Meta Pixel"
}

# ‰∏ªÂáΩÊï∞
main() {
    check_environment
    get_gtm_id
    get_analytics_configs
    update_env_variables
    create_gtm_component
    update_layout
    create_gtm_config_guide
    create_verification_script
    show_completion_summary
}

# ÊâßË°å‰∏ªÁ®ãÂ∫è
main "$@" 