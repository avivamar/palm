name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: 20.x
  PNPM_VERSION: '8'

jobs:
  # 代码质量检查
  lint-and-type-check:
    name: 🔍 Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 🔍 Type check
        run: npm run check-types

      - name: 🎨 Validate colors
        run: npm run colors:validate

      - name: 🌐 Validate locales
        run: npm run validate-locales

  # 单元测试
  test:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run tests
        run: npm run test
        env:
          CI: true

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # 构建测试
  build:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    needs: [lint-and-type-check]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true
          NEXT_TELEMETRY_DISABLED: 1

      - name: 📦 Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            .next/static
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

  # E2E 测试
  e2e-test:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: 📥 Install dependencies
        run: npm ci

      - name: 📥 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: 🏗️ Build application
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true
          NEXT_TELEMETRY_DISABLED: 1

      - name: 🎭 Run Playwright tests
        run: npm run test:e2e
        env:
          CI: true

      - name: 📸 Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Storybook 测试
  storybook-test:
    name: 📚 Storybook Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: 📥 Install dependencies
        run: npm ci

      - name: 📥 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: 📚 Build Storybook
        run: npm run storybook:build

      - name: 🧪 Run Storybook tests
        run: npm run test-storybook:ci

  # 安全扫描
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: 🔒 Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

  # 部署到 Railway (生产环境)
  deploy-railway:
    name: 🚀 Deploy to Railway
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test, build, e2e-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Railway
        uses: railway-app/railway-deploy@v1
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: ${{ secrets.RAILWAY_SERVICE_ID }}

      - name: ✅ Deployment health check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          curl -f https://www.rolitt.com/api/webhook/health || exit 1

  # 部署到 Vercel (预览环境)
  deploy-vercel-preview:
    name: 🔍 Deploy Preview to Vercel
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test, build]
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # 部署到 Cloudflare Workers (备用)
  deploy-cloudflare:
    name: ☁️ Deploy to Cloudflare
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test, build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: 📥 Install dependencies
        run: npm ci

      - name: ☁️ Deploy to Cloudflare Workers
        run: npm run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  # 性能监控
  lighthouse:
    name: 🔍 Lighthouse Performance
    runs-on: ubuntu-latest
    needs: [deploy-railway]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            https://www.rolitt.com
            https://www.rolitt.com/pre-order
          configPath: ./.lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true

  # 通知
  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [deploy-railway]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: 📢 Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: env.SLACK_WEBHOOK_URL != ''
