# Simplified Railway Docker build - Single stage approach
FROM node:24-alpine

WORKDIR /app

# Install all necessary dependencies
RUN apk add --no-cache \
    libc6-compat \
    git \
    dumb-init \
    wget \
    && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Set environment variables
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"
ENV RAILWAY_ENVIRONMENT=1

# Configure npm for Railway stability
RUN npm config set fetch-retry-mintimeout 20000 && \
    npm config set fetch-retry-maxtimeout 120000 && \
    npm config set fetch-timeout 300000 && \
    npm config set registry https://registry.npmjs.org/ && \
    npm config set network-timeout 300000

# Copy package files
COPY package.json package-lock.json ./
COPY packages/admin/package.json ./packages/admin/
COPY packages/shared/package.json ./packages/shared/
COPY packages/shopify/package.json ./packages/shopify/
COPY packages/email/package.json ./packages/email/

# Install dependencies with retry logic
RUN npm ci --frozen-lockfile --prefer-offline --no-audit --no-fund || \
    (sleep 10 && npm ci --frozen-lockfile --prefer-offline --no-audit --no-fund) || \
    (sleep 30 && npm ci --frozen-lockfile --no-audit --no-fund)

# Copy source code
COPY . .

# Build packages
RUN npm run packages:build || echo "No packages to build"

# Generate Prisma client if needed
RUN if [ -f "prisma/schema.prisma" ]; then npx prisma generate; fi

# Build the application
RUN npm run build || (echo "Build failed, retrying..." && sleep 5 && npm run build)

# Clean up unnecessary files
RUN rm -rf /app/.next/cache/* && \
    rm -rf /app/node_modules/.cache && \
    rm -rf /tmp/*

# Set correct permissions
RUN chown -R nextjs:nodejs /app && \
    chmod -R 755 /app

# Switch to non-root user
USER nextjs

# Expose the application port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application - use standalone build if available
CMD ["node", ".next/standalone/server.js"]